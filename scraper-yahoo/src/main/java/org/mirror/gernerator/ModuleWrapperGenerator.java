package org.mirror.gernerator;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.nio.file.Paths.*;

/**
 * To generate ModuleInfoWrapper.java
 */
public class ModuleWrapperGenerator {

    public static final String CLASSNAME = "ModuleInfoWrapper";

    public static Stream<String> readFromResourceAndExtract(String path) throws IOException {
        return Files.lines(get(path)).map((line) -> {
            int start = line.indexOf("\"");
            int end = line.lastIndexOf("\"");
            return line.substring(start + 1, end);

        });
    }

    public static Stream<String> wordToVariable(Stream<String> stream) throws IOException {
        return stream.map((word) -> {
            return "private " + Character.toUpperCase(word.charAt(0)) + word.substring(1)
                    + ' ' + word + ";\n";
        });
    }

    public static void generate(String resourcePath, String destPath) throws IOException {
        Stream<String> words = readFromResourceAndExtract(resourcePath);
        // For cashFlowStatementHistory and cashFlowStatementHistoryQuarterly, we need to convert them into cashFlowStatementHistory and cashflowStatementHistoryQuarterly
        Stream<String> wordsToUse = words.map((word) -> {
            if (word.equals("cashFlowStatementHistory") || word.equals("cashFlowStatementHistoryQuarterly")) {
                return word.replace("cashFlow", "cashflow");
            }
            return word;
        });
        List<String> wordsList = wordsToUse.collect(Collectors.toList());
        List<String> variables = new ArrayList<>();
        variables.add("package org.mirror.DTO.quoteSummary.moduleInfo;");

        variables.add("import lombok.Data;\n" +
                "import org.mirror.gernerator.ModuleWrapperGenerator;\n");


        String importSuffix = "import org.mirror.DTO.quoteSummary.moduleInfo.";
        for (int i = 0; i < wordsList.size(); i++) {
            String word = wordsList.get(i);
            variables.add(importSuffix + word + '.' + Character.toUpperCase(word.charAt(0)) + word.substring(1) + ';');
        }
        variables.add("/**\n" +
                " * Contains all the possible ModuleInfo object that can be grabbed from Yahoo.\n" +
                " *\n" +
                " * All member variables are generated by {@link ModuleWrapperGenerator} according to {@link org.mirror.consts.QuoteSummaryModuleConsts}\n" +
                " */");
        variables.add("@Data\n");
        variables.add("public class " + CLASSNAME + "{\n");
        variables.addAll(wordToVariable(wordsList.stream()).collect(Collectors.toList()));
        variables.add("\n}");


        Path write = Files.write(Paths.get(destPath), variables);
    }

    public static void main(String[] args) throws IOException {
        generate("scraper-yahoo/src/main/resources/generateFrom/Modules", "scraper-yahoo/src/main/java/org/mirror/DTO/quoteSummary/moduleInfo/ModuleInfoWrapper.java");
    }
}
